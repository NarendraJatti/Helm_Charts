k8 native configuration management tool ,can be compared with ansible 
multiple namespaces 
kustomize>>Template Free 

kustomize version
v5.5.0


kubectl apply -k /root/code/k8s/overlays/staging

kustomization is all about intiution or hierarch of the resources defined.it gives
lot of flextiblity-no strict rules..all about intution or visualtion of resoreces

https://www.youtube.com/watch?v=Ks0PMh70GTY


two types of kustomization.yaml files
1)defined at the root/parent directory
2)defined the sub/child directories

why kustomize
=================
>helpful to deploy to multiple branches (**in terraform we have workspaces for this and terragrunt hierarchiy strucutre solves this)
(we have dev,stage separate directiores-not tht bad though or different values.yaml for helm charts)>>this is not optimal for large workload,although it does the job for us!!
kustomzie avoid code duplication
kustomize is very simple,just plain yaml,helm is bit complex due to go templating languae

Two components
============
Kustomize has the concepts of bases and overlays.

base or base config>>identical(same) across environments,base can also take default values
overlays >> each overlay for per enviroment

helm>>package manager,confitionals,loops etc(kusotmize don't have this)

folder structure
===============
k8s/
├── base/ #here shared or default config resides
│   ├── kustomization.yaml
│   ├── deployment.yaml
│   ├── service.yaml
│   └── configmap.yaml
├── overlays/ #environment details or divisons
│   ├── dev/
│   │   ├── kustomization.yaml
│   │   └── configmap-dev.yaml
│   ├── staging/
│   │   ├── kustomization.yaml
│   │   └── configmap-staging.yaml
│   └── prod/
│       ├── kustomization.yaml
│       └── configmap-prod.yaml
└── common/
    ├── kustomization.yaml
    └── namespace.yaml


kustomize comes built-in with kubectl 

helm>>go templating

Kustomiazation.yaml file>1) list of k8 manifest to be managed
2) transformation/customization to be applied 
3)it imports or reference the files or resources to be used th


Transformers
=================


https://github.com/iam-veeramalla/kustomize-zero-to-hero

Unlike Helm, Kustomize doesn’t use templating. This makes it easier to work with pure YAML files and avoid issues with templating languages.

Real-World Example:
In real-world scenarios, you might have multiple environments (development, staging, production), and you can create overlays with different patches for each environment.



kubectl apply 

helm 
=========
# Deploying to Environment 1
helm install my-release-env1 my-chart-path --values value1.yaml

# Deploying to Environment 2
helm install my-release-env2 my-chart-path --values value2.yaml

# Deploying to Environment 3
helm install my-release-env3 my-chart-path --values value3.yaml

helm create my-nginx-chart

helm install my-nginx-release ./my-nginx-chart --values value1.yaml # chart directory (my-nginx-chart):


kubectl kustomize base-folder  

kubectl apply -k overlays/dev -n dev  #-k for kustomization
kubectl apply -k overlays/stage -n stage
kubectl delete -k overlays/stage -n stage
kubectl apply -k k8s/
kubectl delete -k k8s/
OR
kustomize build k8s/ | kubectl apply -f - 
kustomize build k8s/ | kubectl delete -f - 

controlplane ~/code/k8s ➜  pwd
/root/code/k8s

controlplane ~/code/k8s ➜  kubectl apply -k .
-----------OR---------------
controlplane ~/code ➜  kustomize build k8s/ | kubectl apply -f -


kustomize build>>does NOT apply or deploy resources>just display yaml outputs
-----------
When you run kustomize build, it reads the kustomization.yaml file and applies the transformations and patches defined within it to generate the final output YAML, which can then be applied to a Kubernetes cluster using kubectl apply -f.


To apply the generated output to your Kubernetes cluster, you can pipe the result directly into kubectl:
kustomize build . | kubectl apply -f -


In Kubernetes, a Kustomization (kustomize) is a tool used to manage and customize Kubernetes YAML manifests without having to manually edit them. You can create overlays to modify base configurations like adding prefixes, changing image tags, or setting resource configurations. Transformers in Kustomize allow you to manipulate resources in a reusable way.

Transformed Output:

The deployment nginx would be transformed to dev-nginx.
The service nginx would also be transformed to dev-nginx.

The image nginx:latest would be transformed to mycompany/nginx:1.21.


In Kustomize, patches allow you to modify specific fields in Kubernetes resource manifests without needing to modify the entire YAML file. Patches can be applied to resources to make targeted changes, such as updating the number of replicas, changing environment variables, or overriding specific configurations.

There are several types of patches in Kustomize:

patchesStrategicMerge: This is a strategic merge patch that allows you to specify only the fields you want to update in an existing resource.
patchesJson6902: This allows you to modify resources using JSON Patch (RFC 6902) syntax, which can target more specific changes like removing or replacing array elements.

patches
=========
overrides base config mainifest file values
modify k8 manifests>>Example >updating replica set in a specific deployment

overlays
=============
dev/kustomization.yaml
bases:
  - ../../base

patch: |-
      - op: replace 
       path: /spec/replcias
       value: 2


components
===============
resuable pieces of configuration logic(resource+patches) that can be
included in mutiple overlays.components is useful to enable 
features to enable in "subset of overlays".
for subset overlays,putting in base floder -does NOT work..bcz all the 
overlays(subset) will inherit base folder mainifests.
overlays can import compents to use them in overlays
Components are like reusable building blocks that can be included in multiple environments (like base and overlays). They are particularly useful when you have reusable parts of your configuration that you want to apply to multiple environments.
.
├── base
│   ├── deployment.yaml
│   ├── service.yaml
│   └── kustomization.yaml
├── overlays
│   ├── dev
│   │   ├── kustomization.yaml
│   │   └── patches.yaml #overides base config values
│   ├── prod
│   │   ├── kustomization.yaml
│   │   └── patches.yaml
│   └── staging
│       ├── kustomization.yaml
│       └── patches.yaml
└── components
    ├── logging
    │   ├── kustomization.yaml
    │   └── logging-config.yaml
    ├── monitoring
    │   ├── kustomization.yaml
    │   └── prometheus-config.yaml
    └── security
        ├── kustomization.yaml
        └── network-policy.yaml

Garbage collection
================
a brand new configmap is generated everytime we make changes 
to secret/configmap>>leads to stale configmaps
--prune flag while kubectl apply,unsed configmaps will be pruned

imperative commands
===================
using edit subcommand